{
  "hash": "68be7303df94a3142b6d6e6ca9a50750",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Virtual Environments\"\ndescription: How to configure R and Python package dependencies for reproducibility\ndate: February 1, 2023\ndate-modified: today\nauthor: Frank Aragona\n# categories:\n#   - data democratization\n#   - venv\n#   - renv\n#   - reproducibility\nexecute: \n  eval: false\n  freeze: auto\nformat: \n    html: \n        toc-depth: 4\nknitr: true\n---\n\n\n\n\n::: box\n## **Summary**{{< bi file-earmark-check-fill >}}\n\n-   Virtual environments are self-contained, isolated workspaces \n-   They allow you to manage project-specific dependencies\n-   They help to avoid conflicts between different projects\n\nThis doc will go over how to create and manage: \n\n- **venv:** the most common python virtual environment module\n- **conda:** the hellscape of virtual environments that can be used with both Python and R (i don't recommend unless you need it)\n- **renv:** the most commonly used virtual environment package for R (can be mixed with venv and/or conda for bilingual R/Python repos)\n:::\n\n## Intro\n\nA virtual environment is a self-contained, isolated workspace that allows you to manage project-specific dependencies and avoid conflicts between different projects. Virtual environments allow us to execute code while accounting for software/package version differences we have on our local machines. This repo uses virtual environments to configure a user's R and Python software and packages to the repo's specific package versions.\n\nFor example, say you have dplyr version `2.0` but this repo uses dplyr version `1.1`, you may not be able to run the scripts as intended by the author since the functions in dplyr `1.1` may be different than in `2.0`. The virtual environment will allow a given user to use only this repo's version of dplyr so they can run the code as intended.\n\n## venv\n\n`venv` is a module for creating virtual python environments. From the [python venv docs](https://docs.python.org/3/library/venv.html):\n\n> The venv module supports creating lightweight “virtual environments”, each with their own independent set of Python packages installed in their site directories.\n\n> A virtual environment is (amongst other things):\n\n> -   Used to contain a specific Python interpreter and software libraries and binaries which are needed to support a project (library or application). These are by default isolated from software in other virtual environments and Python interpreters and libraries installed in the operating system.\n> -   Contained in a directory, conventionally named .venv or venv in the project directory, or under a container directory for lots of virtual environments, such as `~/.virtualenvs`.\n> -   Not checked into source control systems such as Git.\n> -   Considered as disposable – it should be simple to delete and recreate it from scratch. You don’t place any project code in the environment.\n> -   Not considered as movable or copyable – you just recreate the same environment in the target location.\n\n\nTo create a venv in Python we can do it in a terminal window. Below are instructions on how to create one with VS Code (or Positron).\n\n:::{.callout-note}\n\nyou should create a new venv for every isolated project!\n:::\n\n### create a venv \n\nPositron has all the features of VS Code and Rstudio combined, so it's much easier to set up for R users looking to get into Python and vice-versa.\n\nManaging a venv in Positron is a bit easier than in VS Code because the UI is more user friendly for venv and renv.\n\n#### step 1 - Workspaces\n\n:::{.panel-tabset}\n\n##### Positron\n\nOpen Positron and you will see a screen like this\n\n![](images/positron_main.png)\n\nAssuming you already have a project folder, click `Open Folder` and navigate to the _root_ of the folder you want to work in.\n\nWorkspaces are like isolated projects. Each isolated project needs to have its own virtual environment so that we can avoid unwanted package issues seeping into multiple projects unknowingly.\n\n##### VS Code\n\nOpen VS Code and you will see a screen like this\n\n![](images/vscode_main.png)\n\nAssuming you already have a project folder, click `Open Folder` and navigate to the _root_ of the folder you want to work in.\n\nWorkspaces are like isolated projects. Each isolated project needs to have its own virtual environment so that we can avoid unwanted package issues seeping into multiple projects unknowingly.\n\n:::\n\n#### step 2 - install uv\n\nNow you should see a terminal window with your folder in it looking like -\n\n:::{.medframe}\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nUSER@workbench-1:~/path/to/workspace/folder\n```\n:::\n\n\n\n:::\n\ninstall [uv](https://docs.astral.sh/uv/configuration/installer/):\n\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\ncurl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR=\"/custom/path\" sh\n```\n:::\n\n\n\n\n#### step 3 - create venv\n\nnow run this to create a virtual environment:\n\n:::{.smallframe}\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nuv venv .venv --python=python3.10\n```\n:::\n\n\n\n:::\n\nthis is saying create a venv named `.venv` with a specific python version (`3.10`, but it can be any version you want for this specific project):\n\nyou should get this message:\n\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nUsing CPython 3.10.12 interpreter at: /usr/bin/python3.10\nCreating virtual environment at: .venv\nActivate with: source .venv/bin/activate\n```\n:::\n\n\n\n\n#### step 4 - activate venv\n\n:::{.smallframe}\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nsource .venv/bin/activate\n```\n:::\n\n\n\n:::\n\nyou should see this with `.venv` on the left of your username:\n\n![](images/venv_activate.png)\n\n#### step 5 - add packages\n\nNow you are in an _isolated_ virtual environment called `.venv`. To add packages, run\n\n:::{.smallframe}\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nuv pip install <PACKAGE_NAME>\n```\n:::\n\n\n\n:::\n\nfor example\n\n:::{.smallframe}\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nuv pip install polars\n```\n:::\n\n\n\n:::\n\nif you have a project that has existing packages in a `requirements.txt` file, you can install all of them like this:\n\n:::{.smallframe}\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nuv pip install -r requirements.txt\n```\n:::\n\n\n\n:::\n\n### IDE configurations\n\nNow that you have your venv named `.venv`, we still need to tell Positron and VS Code that we want that venv to run our python code. \n\n:::{.panel-tabset}\n\n#### Positron\n\n##### step 1 - Select Python venv\n\nCreate a new python script in your folder.\n\nNow in the upper right you will see a dropdown menu of Python (or R). Click it and you should see the path to the `.venv` you created in your workspace. Then click the start symbol to start that venv\n\n![](images/positron_interpreter.png)\n\n\n##### step 2 - test to see if it worked\n\nIn your terminal, install a package that you haven't installed before and then try to call that package in your python script. To demonstrate:\n\n:::{.smallframe}\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nuv pip install great_tables\n```\n:::\n\n\n\n:::\n\nNow write the import in your python script:\n\n:::{.smallframe}\n\n\n\n::: {.cell filename='script.py'}\n\n```{.python .cell-code}\nimport great_tables as gt\n```\n:::\n\n\n\n:::\n\nNow highlight that code in your script and press `CTRL + ENTER` and it will execute the code in your Python Console.\n\n#### VS Code\n\n##### step 1 - Python: Select Interpreter\n\nCreate a new python script in your folder.\n\nNow go to Settings > Command Palette > and type Python: Select Interpreter\n\n![](images/command.png)\n\n##### step 2 - Enter Interpreter\n\nYou should see this: \n![](images/edit_interpreter.png)\n\nNow to Enter your specifc interpreter, click on these options:\n\n- Enter interpreter path...\n- Find...\n- .venv\n- bin\n- python3.10\n\n![](images/edit_interpreter.gif)\n\n##### step 3 - test to see if it worked\n\nIn your terminal, install a package that you haven't installed before and then try to call that package in your python script. To demonstrate:\n\n:::{.smallframe}\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nuv pip install great_tables\n```\n:::\n\n\n\n:::\n\nNow write the import in your python script:\n\n:::{.smallframe}\n\n\n\n::: {.cell filename='script.py'}\n\n```{.python .cell-code}\nimport great_tables as gt\n```\n:::\n\n\n\n:::\n\nand run the code in a Jupyter cell by highlighting the code > right click on it > Run in Interactive Window > Run Selection/Line in Interactive Window\n\n![](images/line_jupyter.png)\n\nIt should now open a window where you can run your python code and examine your variables at once.\n\n#### PyCharm\n\nPyCharm also works great with a virtual environment.\n\n##### Step 1: Select a Python Interpreter\n\nYou may also be able to open a PyCharm window from an Anaconda prompt like with VS Code (if it's installed in your env). To do so, write `pycharm` in the prompt and it should open a new window with the env activated.\n\nIf that doesn't work, open PyCharm and on the bottom right there is a python version and interpreter selected. Click it and open \"Add New Interpreter\" \\> \"Add local interpreter\". This opens a new window. Click \"Conda Environment\" and under \"Interpreter\" click the dropdown. You should be able to see your new environment there. If not, click away and click the dropdown again. It's weird sometimes.\n\nThen click okay. Close and reopen the Python Console window and it should have your environment path for the python.exe. Also, the Python Libraries window should have all of the libraries in your environment now.\n\n![](images/pycharm_int.gif)\n\n<br>\n\nNotice that now there are a list of interpreters for you to use. You can now switch back and forth between environments. This is great if you have other repos to use or want to test out new packages that aren't in the main environment.\n\n:::\n\n## conda\n\nRepos may have a file named `environment.yml` for conda environments. It contains a list of all packages and versions used for Python software. This file can be used as a set of instructions for your local machine when configuring your local environment.\n\n### create conda env\n\n#### Step 1: Set Up Anaconda\n\nYou should already have Anaconda installed on your machine if not..\n\n#### Step 2: Open Anaconda Prompt\n\nYou may have different Anaconda prompts (prompts aligned with different shells, like PowerShell, bash, etc). There should be a generic Anaconda prompt. Open that one:\n\n![](images/open_prompt.gif)\n\n<br>\n\nIf the first line in the prompt doesn't start with `(base)`, write:\n\n`conda deactivate`\n\nand it will bring you back to your base environment.\n\n#### Step 3: Change Directories\n\nChange the directory of the prompt to the repo's directory. The code is\n\n`cd C:/Users/XXXXXXX/Projects/Sequencing_2.0`\n\nIf you are already in your user directory, you can just type\n\n`cd projects/sequencing_2.0`\n\ncapitalization doesn't matter\n\n![](images/change_directory.gif)\n\n<br>\n\nNotice that the folder path is now changed to the sequencing repo folder.\n\n#### Step 4: Copy the repo env\n\nNow we're ready to create a new environment based on the repo's environment.\n\nType: `conda env create --name seq_env --file=environment.yml`\n\nNote that how you name your environment doesn't really matter, but name it something that resembles the repo. This will save the headache of having random environments for random repos that you can't remember..\n\n<br>\n\n-   `conda env create` will create a new environment in your `C:/Users/XXXXX/Anaconda3/envs` file path\n-   `--name` or `-n` will name that environment, in this case `seq_env`\n-   `--file=environment.yml` this code will take the file in the sequencing 2.0 repo and use it to create this environment. It is essentially a copy of the software versions in the file.\n\nNote: I sped up the gif below. The whole process may take a few minutes\n\n![](images/conda_create.gif)\n\n#### Step 5: Activate the environment\n\nYou can switch between environments in the conda prompt or in a programming IDE (or both? idk). To activate and switch the env, write:\n\n`conda activate <env_name>`\n\nin this case\n\n`conda activate seq_env`\n\n![](images/conda_activate.gif)\n\n<br>\n\n::: callout-note\nThe environment your in will show on the left of the prompt message. In this case it says `(seq_env)` instead of `(base)`. That way you know what env your working in\n:::\n\n\n### install new packages\n\nLet's say you want to add a new python package to the repo. I recommend doing this in an Anaconda prompt and then saving it over the environment.yml. Then you can push the new environment.yml with the new changes to github. Use these steps:\n\n#### Step 1: Install a new package\n\nGo to the Anaconda prompt, make sure you're in the repo file path (`cd projects/sequencing_2.0`) and make sure you're in the right conda env (`conda activate seq_env`).\n\nNow, install the package. Usually packages can be installed with `pip install` or `conda install` or `conda install -c conda forge <package>`. This depends on the packages. Some need pip, others need conda. Google it to find out. Here i'm going to download a package from NCBI to demonstrate. The package is called `ncbi-datasets-cli`.\n\n-   This package uses `conda-forge` to install. Type in `conda install -c conda-forge ncbi-datasets-cli`\n-   It will give you a message Y/N to confirm. Type \"y\" and enter\n\n![](images/add_pack.gif)\n\n#### Step 2: Save the package to the repo\n\nNow we need to save this package to the repo's `environment.yml`\n\n-   Type `conda env export > environment.yml`\n-   Since the package is in your environment, this code is exporting your new environment to repo's one.\n-   Now push to github\n\n![](images/add_yml.gif)\n\n## renv\n\nFor virtual environments in R, the package called `renv` is commonly used. It will save a list of packages to a lock file, similar to `environment.yml` or `requirements.txt`. Then, every time you or another teammate opens the R project in your repo the `renv` package will activate in the background and determine if any packages are not aligned with the repo's lock file. **It will ensure that everyone is using the same package versions**\n\n::: callout-important\nYour repo should have a `.Rproj` file at the *root* of the directory. If it doesn't you can create it by opening `Rstudio > File > New Project... > Existing Directory (or New Directory)` **Make sure `.Rproj` files are NOT in your `.gitignore`**\n:::\n\n### create a renv\n\n#### step 1 - workspaces\n\n:::{.panel-tabset}\n\n##### Positron\n\nOpen Positron and you will see a screen like this\n\n![](images/positron_main.png)\n\nAssuming you already have a project folder, click `Open Folder` and navigate to the _root_ of the folder you want to work in.\n\nWorkspaces are like isolated projects. Each isolated project needs to have its own virtual environment so that we can avoid unwanted package issues seeping into multiple projects unknowingly.\n\n##### Rstudio\n\n###### step 1.1 - projects\n\nOpen up Rstudio and in the upper right, click `Project: (None)` dropdown and select `New Project...`\n\n![](images/rstudio_newproj.png)\n\n###### step 1.2 - create new project\n\nNow create a new project either in a new folder or an existing folder.\n\n![](images/rstudio_existing.png)\n\nFor existing directories, you can select the folder with Browse and select the R version \n\n![](images/rstudio_existing_new.png)\n\nAll of this will create a file called `<your_project_name>.Rproj`. And you should now be in that R project in Rstudio:\n\n![](images/rstudio_rproj.png)\n\n:::\n\n#### step 2 - install renv\n\nNow that we're in the root of your repo directory, let's initialize `renv`.\n\nFirst install `renv`: \n\n:::{.smallframe}\n\n\n\n::: {.cell filename='Console'}\n\n```{.r .cell-code}\ninstall.packages(\"renv\")\n```\n:::\n\n\n\n:::\n\n#### step 3 - initialize renv\n\nIn your console run this: \n\n:::{.smallframe}\n\n\n\n::: {.cell filename='Console'}\n\n```{.r .cell-code}\nrenv::init()\n```\n:::\n\n\n\n:::\n\n\n![](images/renvinit.gif)\n\n\n`renv::init()` will:\n\n1.  Search through all R scripts in your repo and find all packages used\n2.  Create a snapshot of those packages\n3.  Save all packages in the repo in a new `renv` libraries path (similar to your C drive R libraries paths)\n4.  Create a `.gitignore` within the `renv` libraries path so that you don't get spammed with thousands of libraries in your git commit\n5.  Create a lock file - this is like the `environment.yml` for conda. Think of it as instructions for which packages your repo is using\n6.  It also saved things like an `activate` R script which will activate that `renv` every time the repo is opened from the `.Rproj`\n\n#### step 4 - activate renv\n\nRestart your R session (Session > Restart for Rstudio, or the Restart button in the console for Positron).\n\nrenv should now automatically activate whenever you are in the project/workspace.\n\n#### step 5 - add packages\n\nIf you need to install a new package and want to put it in the repo, you will need to update the lock file. To do either of these:\n\n\n\n\n::: {.cell filename='Console'}\n\n```{.r .cell-code}\nrenv::install(\"<PACKAGE_NAME>\")\n```\n:::\n\n\n\nor\n\n\n\n\n::: {.cell filename='Console'}\n\n```{.r .cell-code}\ninstall.packages(\"<PACKAGE_NAME\")\n```\n:::\n\n\n\n\n#### step 6 - save package updates\n\nNow if you can check your package updates into version control so that other collaborators can install the same packages with the same versions.\n\nAfter you have the packages installed run\n\n\n\n\n::: {.cell filename='Console'}\n\n```{.r .cell-code}\nrenv::snapshot()\n```\n:::\n\n\n\n\nThis will overwrite the lock file with the packages you added. Now you can push the `renv.lock` file to github and other collaborators can sync with your changes.\n\n::: callout-warning\nThere may be version dependency issues when installing a package and running a script. You may need to use `renv::history()` to see the previous hash of the lock file and use `renv::revert()` to revert the lock file back to its previous, stable state. More on this here https://solutions.posit.co/envs-pkgs/environments/upgrades/\n:::\n\n![](images/r_save.gif)\n\nThe video at the bottom of this page explains in detail `renv` and its capabilities https://solutions.posit.co/envs-pkgs/environments/upgrades/\n\n#### step 7 - push to GitHub \n\nNow look at your git status and you will see all the files `renv` created.\n\nWe have\n\n1.  `.Rprofile` that contains an `renv activate.R` script - this will activate the repo's `renv` every time the project is opened\n2.  The `renv.lock` file shows information on each package used in the repo and is used to update collaborator's environments to match the lock file.\n3.  `renv/.gitignore` I don't feel like explaining this one right now - i'll write more later\n4.  `renv/activate.R` this will activate the env whenever the R project is opened\n5.  `renv/settings.dcf` I have no clue what this is\n\n![](images/renv_git.gif)\n\n\n#### troubleshooting \n\nIf you already have an existing repo, you will probably see warnings and errors in the `renv::init()` like I did in the gif above. Not to worry! Read the warnings and follow the instructions. Usually you will need to re-install a package. If you get this warning:\n\n\n\n\n::: {.cell filename='Console'}\n\n```{.r .cell-code}\nThese may be left over from a prior, failed installation attempt.\nConsider removing or reinstalling these packages.\n```\n:::\n\n\n\n\n-   Then run this:\n\n\n\n\n::: {.cell filename='Console'}\n\n```{.r .cell-code}\nrenv::install(\"<PACKAGE_NAME>\")\n```\n:::\n\n\n\n\n- It will install the package again,\n-   and then you need to update the lock file (more on that later) by running `renv::snapshot()`.\n\nNow the package will be installed correctly\n\n![](images/renv_backports.gif)\n\n\n### load renv\n\n#### step 1 - open your workspace\n\nFor Rstudio, open up the `.Rproj` file we created above, or the workspace in Positron\n\n<br>\n\nThis will open up an R window with the repo file path as a root directory. It will also utilize the `renv`. Your console should say something about `renv`, like this\n\n![](images/image-664157118.png)\n\n#### step 2 - restore renv\n\nThe first time you use `renv` you will need to configure it to your machine. To do this, run:\n\n\n\n\n::: {.cell filename='Console'}\n\n```{.r .cell-code}\nrenv::restore()\n```\n:::\n\n\n\n\nThis will create a new environment for your R in your machine using the lock file packages.\n\nNow you're ready to use the scripts! Way less complicated than conda\n\n### using reticulate (python) with renv\n\nNow that your R and Python environments are set up, if you have code that uses the `reticulate` package in R, it might still be pointing to your base Python environment. So, if you need to write python code in R (using reticulate), the code may break. Here's what you need to do to make sure your `reticulate` python path is pointing towards your conda environment:\n\n1.  Open an anaconda prompt\n2.  Activate your env and then write `where python` and it will provide you with a python.exe for that particular env. Copy that path\n3.  Open the `.Rprofile` file in your repo and add this code: `Sys.setenv(RETICULATE_PYTHON = PATH_TO_ENV_PYTHON))`\n    -   Note, if you have other team members, make this code flexible to their usernames. It could look something like this `Sys.setenv(RETICULATE_PYTHON = file.path(Sys.getenv(\"USERPROFILE\"),\"Anaconda3/envs/seq_env/python.exe\"))` where `Sys.getenv(\"USERPROFILE\")` will add `C/Users/XXXX/` and it will automatically add the user's name\n4.  Now restart your R\n5.  Open back up R and **without running any other code or loading any libraries** run `reticulate::py_config()` in your console. This should now show your conda environment path being used for reticulate",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}