{
  "hash": "b263509235549a307b13a9c00d0cd49b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Contribution Guide\"\ndescription: How to contribute and a basic Git/Github usage guide for the NW-PaGe Github Organization\ndate: February 1, 2023\ndate-modified: today\nauthor: Frank Aragona\n# categories:\n#   - reproducibility\n#   - Git\n#   - Github\nexecute: \n  freeze: true\n  eval: false\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.note .medframe}\n{{< bi journals size=\"3em\" >}} **Summary**\n\n- The Northwest Pathogen Genomics Center of Excellence (NW-PaGe) uses a public Github organization to host our code. \n- If you want to contribute to the organization, please read this guide and our [security guidelines](security.qmd).\n:::\n\n\n**You will need Git and Github to make code contributions:**\n\n- Git is a [version control software](https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F).\n- Github is a [platform for developers](https://en.wikipedia.org/wiki/GitHub) that utilizes Git\n- In order to contribute to this organization you must have Git installed and a Github account\n\n\n# Git Basics\n\n- You need to install Git on your machine [follow here for help](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).\n- For a tutorial on how Git works, [follow our Git page here](git.qmd)\n\n\n# Github Basics\n\n- Go to the [Github website](https://github.com/) to create an account.\n- Bookmark the [NW-PaGe Github Org](https://github.com/NW-PaGe)\n\n# Contributing\n\nThere are multiple ways to contribute to a Github repo, whether it is to report a bug, request a feature, or actively contribute to the code base.\n\n:::{.panel-tabset}\n\n## Bug Report\n\nTo report a bug, \n\n1. click on a repo and click on the `Issues` tab.\n\n2. click the `New issue` button\n\n3. click on the `Bug Report` tab\n\nFrom here you will need to fill out the bug report along with steps to reproduce the behavior you're seeing.\n\n## Feature Request\n\nDo you have a feature that you want included in the code base? \n\n1. click on a repo and click on the `Issues` tab.\n\n2. click the `New issue` button\n\n3. click on the `Feature Request` tab\n\nFrom here you will need to fill out the feature request along with details\n\n## Discussions\n\nThere is a discussions tab in our Github org. You can start discussions, ask questions, and share ideas here.\n\n## Contribute Code\n\nTo contribute to a public repo in our Github org, please contact the repo owner to request read/write access. If you want to create a repo in the org, please contact `frank.aragona@doh.wa.gov`.\n\nBefore contributing any code, please read our [security policies](security.qmd). There you will find our repo rules and instructions on how to set up pre-commit hooks.\n\n:::\n\n# Cloning a Repo {#sec-clone}\n\nTo make a local clone of a repo, click on the green `Code` button when you're in the main repo's web page. In the local tab there are multiple ways to clone. For most of our work, I suggest creating an SSH key. If you are new to git/Github and on a Windows machine, I recommend installing the [Github Desktop app](https://desktop.github.com/) and following the instructions below.\n\n:::{.panel-tabset}\n\n## HTTPS\n\nCloning via HTTPS is a relatively quick process. \n\n1. Start by navigating to the repo in Github and selecting the `Code` button:\n\n![](images/https.png)\n\n2. Copy the path that starts with `https://`, in this case it's `https://github.com/NW-PaGe/standards.git`\n\n3. In a terminal/command prompt, navigate to a folder of your choice (in windows I would make a folder called Projects here: `C:/Users/<username>/Projects`)\n\n:::{.smallframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\ncd C:/Users/<your_username>/Projects\n```\n:::\n\n\n:::\n\n4. Use git clone and replace the `https://github.com/NW-PaGe/standards.git` with your path:\n\n:::{.smallframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\ngit clone https://github.com/NW-PaGe/standards.git\n```\n:::\n\n\n:::\n\n5. Check if things ran by executing this code:\n\n:::{.smallframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\ngit status\n```\n:::\n\n\n:::\n\n\n**NOTE:** the HTTPS method is good but it will require you to enter your username and a token every time you push a commit to the remote repo in Github. You will need to create a Personal Access Token (PAT) whenever you want to make a commit. If this is annoying to you, use the SSH or Github Desktop App methods.\n\n### Make a PAT\n\nHere's a guide on [making a PAT](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic)\n\n1. Click on you Github profile icon in the upper right\n\n2. Click Settings\n\n3. Scroll down to `Developer Settings`\n\n4. Select Personal access tokens (classic) and then Generate new token\n\n5. When you make a commit you will need to input this personal access token when it asks for your password. \n\n**Do not store this token anywhere! Especially make sure it is not stored in your repo. This has tons of security risks and needs to be for singular use only**\n\n\n## SSH\n\nSSH is an excellent option for cloning a repo. It is similar to using an identifier to tell Github that you are, in fact, you. [This video below](https://www.youtube.com/watch?v=8X4u9sca3Io) is a great resource on how to set up the key. I will also write out the steps in the video below. Also, see the [Github documentation](https://docs.github.com/en/authentication/connecting-to-github-with-ssh) for more information.\n\n\n\n{{< video https://www.youtube.com/embed/8X4u9sca3Io?si=bHKQHA28VBz2PXUP >}}\n\n\n\n\n1. In a terminal, write the following and replace the email with your email:\n\n:::{.medframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nssh-keygen -t ed25519 -C your@email.com\n```\n:::\n\n\n:::\n\n2. It should then ask if you want to make a passphrase. I recommend doing this\n\n3. Get the pid\n\n:::{.smallframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\neval \"$(ssh-agent -s)\"\n```\n:::\n\n\n:::\n\n4. Make a config file\n\n:::{.smallframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\ntouch ~/.ssh/config\n```\n:::\n\n\n:::\n\n5. If the file doesn't open, you can open it like this\n\n:::{.smallframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nnano ~/.ssh/config\n```\n:::\n\n\n:::\n\n6. Add this to the config file. it will use your passkey and recognize you\n\n:::{.medframe}\n\n\n::: {.cell filename='ssh/config'}\n\n```{.bash .cell-code}\nHost *\n  IgnoreUnknown AddKeysToAgent,UseKeychain\n  AddKeysToAgent yes\n  IdentityFile ~/.ssh/id_ed25519\n  UseKeychain yes\n```\n:::\n\n\n:::\n\nTo save this file in nano, on your keyboard write `CRTL+O` then `ENTER` to save the file. Then `CTRL+X` to exit back to the terminal. You can also open this file through a notepad or other software. You could also search for the file in your file explorer and edit it in notepad if that is easier.\n\n7. Add the identity\n\n:::{.medframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nssh-add ~/.ssh/id_ed25519\n```\n:::\n\n\n:::\n\n8. In Github, go to your profile and the `SSH + GPG Keys` section\n\n9. Click SSH Keys, add a title, and in the key location write your key. You can find your key in your terminal by writing:\n\n:::{.medframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\ncat ~/.ssh/id_ed25519.pub\n```\n:::\n\n\n:::\n\n**Copy the whole output including your email and paste it into the Github key location**\n\n10. Test it by writing this:\n\n:::{.medframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nssh -T git@github.com\n```\n:::\n\n\n:::\n\n11. Use the key to clone a repo.\n\nNow you can clone a repo using the SSH key. Copy the SSH path and write this (replace the string after clone with your repo of choice):\n\n:::{.medframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\ngit clone git@github.com:org/reponame.git\n```\n:::\n\n\n:::\n\n\n## GitHub CLI\n\nThe [GitHub CLI](https://cli.github.com/) is an excellent tool for not just cloning your repo, but for managing repositories and organizations from a terminal. \n\n:::{.panel-tabset}\n\n### Windows\n\n### WSL/Linux\n\nTo install in a linux terminal, I'm following the instructions provided in the [Github CLI repo](https://github.com/cli/cli/blob/trunk/docs/install_linux.md).\n\n1. Paste this code into your bash terminal and execute it.\n\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\n(type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \\\n&& sudo mkdir -p -m 755 /etc/apt/keyrings \\\n&& wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \\\n&& sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \\\n&& echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \\\n&& sudo apt update \\\n&& sudo apt install gh -y\n```\n:::\n\n\n\n2. Then upgrate the command with the code below\n\n:::{.smallframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\nsudo apt update\nsudo apt install gh\n```\n:::\n\n\n:::\n\n3. You now need to authorize yourself as a user. \n\n:::{.smallframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\ngh auth login\n```\n:::\n\n\n:::\n\n4. It will ask you to authorize in a browser or with a personal access token\n\n  I created a [personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens). In linux there are some issues with the command and using a browser fyi.\n\n5. Now you can clone a repo like this:\n\n:::{.smallframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\ngh repo clone org/repo-name\n```\n:::\n\n\n:::\n\nYou can also now do some cool things with your org/repo like searching for strings, creating issues, and more. For example, here are the issues in this repo:\n\n:::{.smallframe}\n\n\n::: {.cell filename='terminal'}\n\n```{.bash .cell-code}\ngh issue list\n```\n:::\n\n\n:::\n\n\n\n::: {.cell filename='output'}\n\n```{.markdown .cell-code}\nShowing 3 of 3 open issues in NW-PaGe/standards\n\nID  TITLE                                      LABELS         UPDATED           \n#7  add .gitignore documentation                              about 2 months ago\n#3  Make sure all references are added to ...  documentation  about 5 months ago\n#2  Fix cross reference links                  documentation  about 5 months ago\n```\n:::\n\n\n\n\n\n:::\n\n\n## Open with GitHub Desktop\n\n:::\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}