---
title: "Git Basics"
description: Basic Git usage guide
date: February 1, 2023
date-modified: today
author: Frank Aragona
# categories:
#   - reproducibility
#   - Git
#   - Github
execute: 
  freeze: true
---

```{r}
#| include: false
knitr::opts_chunk$set(engine.path = list(
  bash = 'C:/Users/FAA3303/new_git/Git/bin/bash.exe'
))
```

```{css,echo=F}
h1, .h1, h2, .h2, h3, .h3 {
    margin-top: 84px;
}

.watch {
  background-color: lightpurple;
  border: 3px solid purple;
  font-weight: bold;
}
```

# Intro

Showing how to create and work off of a feature branch using `git` and github.

# Before writing code

**First check to see if your main branch is up to date** and has the most recent commits added. This should be the first thing you do before running/writing any code.

`git status` will tell you:

1.  Which branch you are in
2.  If your local branch is up to date when comparing to that branch in the remote repo
3.  If you have any files waiting to be committed

`git fetch` will:

1.  Refresh your branch
2.  Search for any differences between your local clone and the repo in github. If there are changes, it will display a message

`git pull` will pull all the changes in the remote repo into your local clone branch

<br> <br>

```{bash class.output = "watch"}
#| echo: true
#| eval: true
git status
```

<br> <br>

```{bash class.output = "watch"}
git fetch
```

<br> <br>

```{bash class.output = "watch"}
git pull
```

It's the same in the git desktop app. Make sure you are in the branch you want to be in, then click fetch and pull to update that branch to include the most recent commits in the remote repo

![](https://content.codecademy.com/articles/Git-and-GitHub-Desktop/what-is-git-pull-origin.jpg)

# Switch to feature branch

If we want to make changes to code, first **make a new branch off the main**.

`git branch` will show all the branches in the repo and the one you are currently in

`git checkout -b new-branch-name` will create a new branch. In this case, we already have our feature branch called `test-dcipher-cases`

`git checkout branch-name` will *switch* to a branch. In this case we can switch to `test-dcipher-cases`

```{bash class.output = "watch"}
git branch
```

```{bash}
#| eval: false
git checkout test-dcipher-cases
```

Or in the desktop app

![](images/gitdesk.gif)

# Making changes

If we want to make a change to the code, make a new branch off of `test-dcipher-cases` and switch to that branch

<br>

```{bash}
#| eval: false
git checkout -b test-frank2
```

<br>

and in the desktop app:

![](images/gitdesk23-01.gif)

<br>

# Committing changes to the feature branch

Now you can make changes in your R script and when you save them they will be ready to be committed to this new branch.

`git add` to stage your changes

`git commit -am "messge"` to commit those changes to the new branch with a message

`git push --set-upstream origin test-dcipher-cases` to push those changes to the remote repo on the new branch

```{bash}
#| eval: false

git add

git commit -am "this is a test- pls delete"

git push --set-upstream origin test-dcipher-cases

```

![](images/gitdesk233-01.gif)

<br>

# Making a pull request

This part happens in github.

1.  Select who you want to review your code and assign yourself.
2.  Use labels to tag what this pull request refers to (very helpful in search for changes when managing the project) and
3.  Add a milestone if it applies.

This should automatically send an email to the reviewers that there is code needed to be merged to a branch.

![](images/gitdesk2333-01.gif)

# For Reviewers

When reviewing changes, **make sure the commit/changes are being merged to the correct branch**.

Github automatically compares to the main branch, so you will have to manually click on the base branch and change it to `test-dcipher-cases`

![](images/paste-F8997DE3.png)

![](images/paste-9103DFBF.png)
